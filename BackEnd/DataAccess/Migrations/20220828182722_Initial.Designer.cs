// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220828182722_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Chatroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Chatrooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rick and Morty group",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Braking Bad group",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChatroomId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeletedForEveryone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletedForSender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int?>("RepliedMessageId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("RepliedMessageId");

                    b.HasIndex("ChatroomId", "SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEEgANxKNg2hy8oRXUngzt5P9L6vUxxdUt3buOSq5Hc0vUgSJKpNgMR3HftgMpLi2/w==",
                            Username = "Rick Sanchez"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEP5Ojugck10+AbXTZQxeyLUuFSy8Y5kM2gYeVhsNPLQC7A9TQoOAFY8E9Ge7Fj/rVw==",
                            Username = "Morty Smith"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEKZdTehwvBrssXgaE5LDrgDELH48cMDE5v8KgTSV8spacVPnxxmLPkT88U+mRTiGWg==",
                            Username = "Jerry Smith"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEPRREPLCu1pII4tq95H5lnBl8ioHqeg2CRc9gMr8ITfsfGOEbb0VnrZvaGad6KJMfw==",
                            Username = "Walter White"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEJXi4SgxNPpG2fZjiNkjPOP4lpoeKeqEEXKLXVwnFxI7trsqCOpSGgJNR7i+sYferA==",
                            Username = "Jesse Pinkman"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEKzsKNG2MVOfKfRSe8b06gADF9ttDfZ1Xkl/RNTNYz1P/GdnvMrgyI+qbCeYRQMG9A==",
                            Username = "Saul Goodman"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserChatroom", b =>
                {
                    b.Property<int>("ChatroomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChatroomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChtatrooms", (string)null);

                    b.HasData(
                        new
                        {
                            ChatroomId = 1,
                            UserId = 1
                        },
                        new
                        {
                            ChatroomId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ChatroomId = 2,
                            UserId = 2
                        },
                        new
                        {
                            ChatroomId = 2,
                            UserId = 3
                        },
                        new
                        {
                            ChatroomId = 3,
                            UserId = 4
                        },
                        new
                        {
                            ChatroomId = 3,
                            UserId = 5
                        },
                        new
                        {
                            ChatroomId = 4,
                            UserId = 4
                        },
                        new
                        {
                            ChatroomId = 4,
                            UserId = 6
                        },
                        new
                        {
                            ChatroomId = 5,
                            UserId = 5
                        },
                        new
                        {
                            ChatroomId = 5,
                            UserId = 6
                        },
                        new
                        {
                            ChatroomId = 6,
                            UserId = 1
                        },
                        new
                        {
                            ChatroomId = 6,
                            UserId = 2
                        },
                        new
                        {
                            ChatroomId = 6,
                            UserId = 3
                        },
                        new
                        {
                            ChatroomId = 7,
                            UserId = 4
                        },
                        new
                        {
                            ChatroomId = 7,
                            UserId = 5
                        },
                        new
                        {
                            ChatroomId = 7,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.HasOne("Core.Entities.Message", "RepliedMessage")
                        .WithMany("Replies")
                        .HasForeignKey("RepliedMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Core.Entities.UserChatroom", "UserChatroom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatroomId", "SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RepliedMessage");

                    b.Navigation("UserChatroom");
                });

            modelBuilder.Entity("Core.Entities.UserChatroom", b =>
                {
                    b.HasOne("Core.Entities.Chatroom", "Chatroom")
                        .WithMany("UserChatrooms")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserChatrooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chatroom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Chatroom", b =>
                {
                    b.Navigation("UserChatrooms");
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("UserChatrooms");
                });

            modelBuilder.Entity("Core.Entities.UserChatroom", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
